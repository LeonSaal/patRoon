% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/formulas.R
\docType{class}
\name{formulas-class}
\alias{formulas-class}
\alias{formulas}
\alias{formulasConsensus-class}
\alias{formulasConsensus}
\alias{annotations,formulas-method}
\alias{analyses,formulas-method}
\alias{show,formulas-method}
\alias{[[,formulas,ANY,ANY-method}
\alias{as.data.table,formulas-method}
\alias{annotatedPeakList,formulas-method}
\alias{plotSpectrum,formulas-method}
\alias{plotScores,formulas-method}
\alias{consensus,formulas-method}
\title{Formula lists class}
\usage{
\S4method{annotations}{formulas}(obj, features = FALSE)

\S4method{analyses}{formulas}(obj)

\S4method{show}{formulas}(object)

\S4method{[[}{formulas,ANY,ANY}(x, i, j)

\S4method{as.data.table}{formulas}(
  x,
  fGroups = NULL,
  fragments = FALSE,
  countElements = NULL,
  countFragElements = NULL,
  OM = FALSE,
  normalizeScores = "none",
  excludeNormScores = defaultExclNormScores(x),
  average = FALSE
)

\S4method{annotatedPeakList}{formulas}(
  obj,
  index,
  groupName,
  analysis = NULL,
  MSPeakLists,
  onlyAnnotated = FALSE
)

\S4method{plotSpectrum}{formulas}(
  obj,
  index,
  groupName,
  analysis = NULL,
  MSPeakLists,
  title = NULL,
  specSimParams = getDefSpecSimParams(),
  useGGPlot2 = FALSE,
  mincex = 0.9,
  xlim = NULL,
  ylim = NULL,
  ...
)

\S4method{plotScores}{formulas}(
  obj,
  index,
  groupName,
  analysis = NULL,
  normalizeScores = "max",
  excludeNormScores = defaultExclNormScores(obj),
  useGGPlot2 = FALSE
)

\S4method{consensus}{formulas}(
  obj,
  ...,
  absMinAbundance = NULL,
  relMinAbundance = NULL,
  uniqueFrom = NULL,
  uniqueOuter = FALSE,
  rankWeights = 1,
  labels = NULL
)
}
\arguments{
\item{obj, x, object, formulas}{The \code{formulas} object.}

\item{features}{If \code{TRUE} returns formula data for features, otherwise
for feature groups.}

\item{i, j}{For \code{[}/\code{[[}: A numeric or character value which is used to select analyses/feature groups by
their index or name, respectively (for the order/names see \code{analyses()/groupNames()}).\cr\cr For \code{[}: Can also be logical to perform logical selection
(similar to regular vectors). If missing all analyses/feature groups are selected.\cr\cr For \code{[[}: should be a scalar value. If \code{j} is not specified, \code{i} selects by feature groups instead.}

\item{fGroups}{The \code{\link{featureGroups}} object that was used to
generate this object. If not \code{NULL} it is used to add feature group
information (retention and \emph{m/z} values).}

\item{countElements, countFragElements}{A \code{character} vector with
elements that should be counted for each MS(/MS) formula candidate. For
instance, \code{c("C", "H")} adds columns for both carbon and hydrogen
amounts of each formula. Note that the neutral formula
(\code{neutral_formula} column) is used to count elements of non-fragmented
formulae, whereas the charged formula of fragments (\code{ion_formula}
column in \code{fragInfo} data) is used for fragments. Set to \code{NULL} to not count any
elements.}

\item{OM}{For \code{as.data.table}: if set to \code{TRUE} several columns
  with information relevant for organic matter (OM) characterization will be
  added (e.g. elemental ratios, classification). This will also make sure
  that \code{countElements} contains at least C, H, N, O, P and S.

  For \code{filter}: If \code{TRUE} then several filters are applied to
  exclude unlikely formula candidates present in organic matter (OM). See
  Source section for details.}

\item{normalizeScores}{A \code{character} that specifies how normalization of
annotation scorings occurs. Either
\code{"none"} (no normalization),
\code{"max"} (normalize to max value) or \code{"minmax"} (perform min-max
normalization). Note that normalization of negative scores (e.g. output by
\command{SIRIUS}) is always performed as min-max. Furthermore, currently
normalization for \code{compounds} takes the original min/max scoring
values into account when candidates were generated. Thus, for
\code{compounds} scoring, normalization is not affected when candidate
results were removed after they were generated (\emph{e.g.} by use of
\code{filter}).}

\item{excludeNormScores}{A
  \code{character} vector specifying any compound scoring names that
  should \emph{not} be normalized. Set to \code{NULL} to normalize all
  scorings. Note that whether any normalization occurs is set by the
  \code{excludeNormScores} argument.

  For \code{compounds}: By default \code{score} and
  \code{individualMoNAScore} are set to mimic the behavior of the
  \command{MetFrag} web interface.}

\item{average}{If set to \code{TRUE} an 'average formula' is generated for
each feature group by combining all elements from all candidates and
averaging their amounts. This obviously leads to non-existing formulae,
however, this data may be useful to deal with multiple candidate formulae
per feature group when performing elemental characterization.}

\item{groupName}{The name of the feature group to which the candidate
belongs.}

\item{analysis}{A \code{character} specifying the analysis for which the
annotated spectrum should be plotted. If \code{NULL} then annotation
results for the complete feature group will be plotted.}

\item{MSPeakLists}{The \code{\link{MSPeakLists}} object that was used to
generate the candidate}

\item{onlyAnnotated}{Set to \code{TRUE} to filter out any peaks that could
not be annotated.}

\item{title}{The title of the plot. Set to \code{NULL} for an automatically
generated title.}

\item{useGGPlot2}{If \code{TRUE} then \pkg{\link{ggplot2}} is used for
plotting, otherwise base plot used. For \code{plotSpectrum}, \code{ggplot2}
allows nicely repelled text for annotation. However, base plot is generally
faster.}

\item{xlim, ylim}{Sets the plot size limits used by
\code{\link[graphics]{plot}}. Set to \code{NULL} for automatic plot sizing.}

\item{\dots}{For \code{plotSpectrum}: Further arguments passed to
  \code{\link[graphics]{plot}}.

  Others: Any further (and unique) \code{formulas} objects.}

\item{absMinAbundance, relMinAbundance}{Minimum absolute or relative
(\samp{0-1}) abundance across objects for a result to be kept. For
instance, \code{relMinAbundance=0.5} means that a result should be present
in at least half of the number of compared objects. Set to \samp{NULL} to
ignore and keep all results. Limits cannot be set when \code{uniqueFrom} is
not \code{NULL}.}

\item{uniqueFrom}{Set this argument to only retain formulas that are unique
within one or more of the objects for which the consensus is made.
Selection is done by setting the value of \code{uniqueFrom} to a
\code{logical} (values are recycled), \code{numeric} (select by index) or a
\code{character} (as obtained with \code{algorithm(obj)}). For
\code{logical} and \code{numeric} values the order corresponds to the order
of the objects given for the consensus. Set to \code{NULL} to ignore.}

\item{uniqueOuter}{If \code{uniqueFrom} is not \code{NULL} and if
\code{uniqueOuter=TRUE}: only retain data that are also unique between
objects specified in \code{uniqueFrom}.}

\item{rankWeights}{A numeric vector with weights of to calculate the mean
ranking score for each candidate. The value will be re-cycled if necessary,
hence, the default value of \samp{1} means equal weights for all considered
objects.}

\item{labels}{A \code{character} with names to use for labelling. If
\code{NULL} labels are automatically generated.}

\item{drop}{ignored.}

\item{name}{The feature group name (partially matched).}

\item{precursor}{The formula of the precursor (in neutral form).}
}
\value{
\code{annotations} returns a \code{list} containing for each feature
  group (or feature if \code{features=TRUE}) a \code{\link{data.table}}
  with an overview of all generated formulae and other data such as candidate
  scoring and MS/MS fragments.

\code{as.data.table} returns a \code{\link{data.table}}.

\code{plotSpectrum} will return a \code{\link[=ggplot2]{ggplot
  object}} if \code{useGGPlot2} is \code{TRUE}.

\code{consensus} returns a \code{formulas} object that is produced by
  merging results from multiple \code{formulas} objects.
}
\description{
Contains data of generated chemical formulae for given feature groups.
}
\details{
\code{formulas} objects are obtained from \link[=formula-generation]{formula
generators}.
}
\section{Methods (by generic)}{
\itemize{
\item \code{annotations}: Accessor method to obtain generated formulae.

\item \code{analyses}: returns a \code{character} vector with the names of the
analyses for which data is present in this object.

\item \code{show}: Show summary information for this object.

\item \code{[[}: Extract a formula table. If both arguments (\code{i} and
\code{j}) are specified, the feature specific formula table belonging to
the analysis (\code{i})/feature group (\code{j}) is returned. Otherwise the
formula table for the feature group specified by \code{j} is returned.

\item \code{as.data.table}: Generates a table with all candidate formulae for each
feature group and other information such as element counts.

\item \code{annotatedPeakList}: Returns an MS/MS peak list annotated with data from a
given candidate formula.

\item \code{plotSpectrum}: Plots an annotated spectrum for a given candidate
formula of a feature or feature group.

\item \code{plotScores}: Plots a barplot with scoring of a candidate formula.

\item \code{consensus}: Generates a consensus of results from multiple
objects. In order to rank the consensus candidates, first
each of the candidates are scored based on their original ranking
(the scores are normalized and the highest ranked candidate gets value
\samp{1}). The (weighted) mean is then calculated for all scorings of each
candidate to derive the final ranking (if an object lacks the candidate its
score will be \samp{0}). The original rankings for each object is stored in
the \code{rank} columns.
}}

\section{Slots}{

\describe{
\item{\code{formulas,featureFormulas}}{Lists of all generated formulae. Use the
\code{annotations} method for access.}

\item{\code{scoreRanges}}{The original min/max values of all scorings when candidate
results were generated. This is used for normalization.}
}}

\section{Source}{
 Calculation of the aromaticity index (AI) and related double
  bond equivalents (DBE_AI) is performed as described in Koch 2015. Formula
  classification is performed by the rules described in Abdulla 2013.
  Filtering of OM related molecules is performed as described in Koch 2006
  and Kujawinski 2006. (see references).

 Subscripting of formulae for plots generated by
  \code{plotSpectrum} is based on the \code{chemistry2expression} function
  from the \href{https://github.com/schymane/ReSOLUTION}{ReSOLUTION} package.
}

\section{S4 class hierarchy}{
 \itemize{   \item{\code{\link{featureAnnotations}}}   \itemize{     \item{\strong{\code{\link{formulas}}}}     \itemize{       \item{\code{\link{formulasConsensus}}}       \item{\code{\link{formulasSet}}}       \itemize{         \item{\code{\link{formulasConsensusSet}}}       }       \item{\code{\link{formulasUnset}}}     }   } }
}

\references{
\insertRef{Koch2015}{patRoon} \cr\cr
  \insertRef{Abdulla2013}{patRoon} \cr\cr
  \insertRef{Koch2006}{patRoon} \cr\cr
  \insertRef{Kujawinski2006}{patRoon}
}
