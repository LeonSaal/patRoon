% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-adduct.R
\name{adduct-utils}
\alias{adduct-utils}
\alias{GenFormAdducts}
\alias{MetFragAdducts}
\alias{as.adduct}
\alias{calculateIonFormula}
\alias{calculateNeutralFormula}
\title{Adduct utilities}
\usage{
GenFormAdducts()

MetFragAdducts()

as.adduct(x, format = "generic", isPositive = NULL, charge = NULL)

calculateIonFormula(formula, adduct)

calculateNeutralFormula(formula, adduct)
}
\arguments{
\item{x}{The object that should be converted. Should be a \code{character}
string, a \code{numeric} \command{MetFrag} adduct identifier
(\code{adduct_mode} column obtained with \code{MetFragAdducts}) or an
\code{\link{adduct}} object (in which case no conversion occurs).}

\item{format}{A \code{character} that specifies the source format.

  \code{"generic"} is an internally used generic format that supports full
  textual conversion. Examples: \code{"[M+H]+"}, \code{"[2M+H]+"},
  \code{"[M+3H]3+"}.

  \code{"sirius"} Is the format used by \command{SIRIUS}. It is similar to
  \code{generic} but does not allow multiple charges/molecules. See the
  SIRIUS manual for more details.

  \code{"genform"} and \code{"metfrag"} support fixed types of adducts
  which can be obtained with the \code{GenFormAdducts} and
  \code{MetFragAdducts} functions, respectively.
  
  \code{"openms"} is the format used by the \command{MetaboliteAdductDecharger} tool.
  
  \code{"cliquems"} is the format used by \pkg{cliqueMS}.}

\item{isPositive}{A logical that specifies whether the adduct should be
positive. Should only be set when \code{format="metfrag"} and \code{x} is a
\code{numeric} identifier.}

\item{charge}{The final charge. Only needs to be set when \code{format="openms"}.}

\item{formula}{A \code{character} vector with formulae to convert.}

\item{adduct}{An \code{\link{adduct}} object (or something that can be converted to it with \code{\link{as.adduct}}).
Examples: \code{"[M-H]-"}, \code{"[M+Na]+"}.}
}
\description{
Several utility functions to work with adducts.
}
\details{
\code{GenFormAdducts} returns a table with information on adducts
  supported by \command{GenForm}.

\code{MetFragAdducts} returns a table with information on adducts
  supported by \command{MetFrag}.

\code{as.adduct} Converts an object in to an \code{\link{adduct}}
  object.

\code{calculateIonFormula} Converts one or more neutral formulae to
  adduct ions.

\code{calculateNeutralFormula} Converts one or more adduct ions to
  neutral formulae.
}
\examples{
as.adduct("[M+H]+")
as.adduct("[M+H2]2+")
as.adduct("[2M+H]+")
as.adduct("[M-H]-")
as.adduct("+H", format = "genform")
as.adduct(1, isPositive = TRUE, format = "metfrag") # MetFrag adduct ID 1 --> returns [M+H]+

calculateIonFormula("C2H4O", "[M+H]+") # C2H5O
calculateNeutralFormula("C2H5O", "[M+H]+") # C2H4O

}
