% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/main.R, R/check_components.R,
%   R/check_features.R
\name{checkFeatures}
\alias{checkFeatures}
\alias{checkComponents}
\alias{check-GUI}
\alias{checkComponents,components-method}
\alias{importCheckFeaturesSession}
\alias{checkFeatures,featureGroups-method}
\alias{getMCTrainData}
\alias{predictCheckFeaturesSession}
\title{Interactive GUI utilities to check workflow data}
\usage{
checkFeatures(
  fGroups,
  session = "checked-features.yml",
  EICParams = getDefEICParams(),
  clearSession = FALSE
)

checkComponents(
  components,
  fGroups,
  session = "checked-components.yml",
  EICParams = getDefEICParams(),
  clearSession = FALSE
)

\S4method{checkComponents}{components}(
  components,
  fGroups,
  session = "checked-components.yml",
  EICParams = getDefEICParams(),
  clearSession = FALSE
)

importCheckFeaturesSession(
  sessionIn,
  sessionOut,
  fGroups,
  rtWindow = 6,
  mzWindow = 0.002,
  overWrite = FALSE
)

\S4method{checkFeatures}{featureGroups}(
  fGroups,
  session = "checked-features.yml",
  EICParams = getDefEICParams(),
  clearSession = FALSE
)

getMCTrainData(fGroups, session)

predictCheckFeaturesSession(fGroups, session, model = NULL, overWrite = FALSE)
}
\arguments{
\item{fGroups}{A \code{\link{featureGroups}} object.

  This should be the 'new' object for \code{importCheckFeaturesSession} for which the session needs to be imported.}

\item{session}{The session file name.}

\item{EICParams}{A named \code{list} with parameters used for extracted ion chromatogram (EIC) creation. See the
\link[=EICParams]{EIC parameters} documentation for more details.}

\item{clearSession}{If \code{TRUE} the session will be completely cleared before starting the GUI. This effectively
removes all selections for data removal.}

\item{components}{The \code{\link{components}} to be checked.}

\item{sessionIn, sessionOut}{The file names for the input and output sessions.}

\item{rtWindow}{The retention time window (seconds) used to relate 'old' with 'new' feature groups.}

\item{mzWindow}{The \emph{m/z} window (in Da) used to relate 'old' with 'new' feature groups.}

\item{overWrite}{Set to \code{TRUE} to overwrite the output session file if it already exists. If \code{FALSE}, the
function will stop with an error message.}

\item{model}{The model that was created with \pkg{MetaClean} and that should be used to predict pass/fail data. If
\code{NULL}, the example model of the \pkg{MetaCleanData} package is used.}
}
\value{
A dataframe with the class predictions as well as the associated probabilities for each EIC as returned by the \code{MetaClean::getPredicitons} function. 
  The dataframe has the four columns: EIC, Pred_Class, Pred_Prob_Pass, Pred_Prob_Fail.
}
\description{
These functions provide interactive utilities to explore and review workflow data using a \pkg{\link{shiny}}
graphical user interface (GUI). In addition, unsatisfactory data (\emph{e.g.} noise identified as a feature and
unrelated feature groups in a component) can easily be selected for removal.
}
\details{
The data selected for removal is stored in \emph{sessions}. These are \file{YAML} files to allow easy external
manipulation. The sessions can be used to restore the selections that were made for data removal when the GUI tool is
executed again. Furthermore, functionality is provided to import and export sessions. To actually remove the data the
\code{\link{filter}} method should be used with the session file as input.

\code{checkComponents} is used to review components and their feature groups contained within. A typical use
  case is to verify that peaks from features that were annotated as related adducts and/or isotopes are correctly
  aligned.

\code{importCheckFeaturesSession} is used to import a session file that was generated from a different
  \code{\link{featureGroups}} object. This is useful to avoid re-doing manual interpretation of chromatographic peaks
  when, for instance, feature group data is re-created with different parameters.

\code{checkFeatures} is used to review chromatographic information for feature groups. Its main purpose is
  to assist in reviewing the quality of detected feature (groups) and easily select unwanted data such as features
  with poor peak shapes or noise.

\code{getMCTrainData} converts a session created by \code{checkFeatures} to a \code{data.frame} that can be
  used by the \pkg{MetaClean} to train a new model. The output format is comparable to that from
  \code{\link[MetaClean]{getPeakQualityMetrics}}.

\code{predictCheckFeaturesSession} Uses ML data from \pkg{MetaClean} to predict the quality (Pass/Fail) of
  feature group data, and converts this to a session which can be reviewed with \code{checkFeatures} and used to
  remove unwanted feature groups by \code{\link[=filter,featureGroups-method]{filter}}.
}
\note{
The \code{topMost} and \code{topMostByRGroup} EIC parameters (\code{\link{EICParams}}) are ignored.

\code{checkComponents}: Some componentization algorithms (\emph{e.g.} \code{\link{generateComponentsNontarget}}
  and \code{\link{generateComponentsTPs}}) may output components where the same feature group in a component is
  present multiple times, for instance, when multiple TPs are matched to the same feature group. If such a feature
  group is selected for removal, then \emph{all} of its result in the component will be marked for removal.

\code{getMCTrainData} only uses session data for selected feature groups. Selected features for removal are
  ignored, as this is not supported by \pkg{MetaClean}.
}
\references{
\insertRef{Chetnik2020}{patRoon}
}
