% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/feature_groups-comparison.R
\docType{class}
\name{featureGroups-compare}
\alias{featureGroups-compare}
\alias{featuresFromFeatGroups-class}
\alias{featuresFromFeatGroups}
\alias{featuresConsensus-class}
\alias{featuresConsensus}
\alias{featureGroupsConsensus-class}
\alias{featureGroupsConsensus}
\alias{comparison,featureGroups-method}
\alias{comparison}
\alias{plot,featureGroupsComparison,ANY-method}
\alias{plotVenn,featureGroupsComparison-method}
\alias{plotUpSet,featureGroupsComparison-method}
\alias{plotChord,featureGroupsComparison-method}
\alias{consensus,featureGroupsComparison-method}
\alias{consensus,featureGroupsComparisonSet-method}
\title{Comparing feature groups}
\usage{
\S4method{comparison}{featureGroups}(..., groupAlgo, groupArgs = list(rtalign = FALSE))

\S4method{plot}{featureGroupsComparison,ANY}(x, retMin = TRUE, ...)

\S4method{plotVenn}{featureGroupsComparison}(obj, which = NULL, ...)

\S4method{plotUpSet}{featureGroupsComparison}(obj, which = NULL, ...)

\S4method{plotChord}{featureGroupsComparison}(obj, addSelfLinks = FALSE, addRetMzPlots = TRUE, ...)

\S4method{consensus}{featureGroupsComparison}(
  obj,
  absMinAbundance = NULL,
  relMinAbundance = NULL,
  uniqueFrom = NULL,
  uniqueOuter = FALSE
)

\S4method{consensus}{featureGroupsComparisonSet}(obj, ...)
}
\arguments{
\item{\dots}{For \code{comparison}: \code{featureGroups} objects that should
  be compared. If the arguments are named (\emph{e.g.} \code{myGroups =
  fGroups}) then these are used for labelling, otherwise objects are
  automatically labelled by their \code{\link{algorithm}}.

  For \code{plot}, \code{plotVenn}, \code{plotChord}: further options passed
  to \code{plot}, \pkg{\link{VennDiagram}} plotting functions (\emph{e.g.}
  \code{\link{draw.pairwise.venn}}) and \code{\link{chordDiagram}}
  respectively.

  For \code{plotUpSet}: any further arguments passed to the \code{plotUpSet}
  method defined for \code{\link{featureGroups}}.}

\item{groupAlgo}{The \code{\link[=feature-grouping]{feature grouping
algorithm}} that should be used for grouping \emph{pseudo} features (see
details). Valid values are: \code{"xcms"}, \code{xcms3}, \code{kpic2} or \code{"openms"}.}

\item{groupArgs}{A \code{list} containing further parameters for
\code{\link[=feature-grouping]{feature grouping}}.}

\item{x, obj}{The \code{featureGroupsComparison} object.}

\item{retMin}{If \code{TRUE} retention times are plotted as minutes (seconds otherwise).}

\item{which}{A character vector specifying one or more labels of compared
feature groups. For \code{plotVenn}: if \code{NULL} then all compared
groups are used.}

\item{addSelfLinks}{If \code{TRUE} then 'self-links' are added which
represent non-shared data.}

\item{addRetMzPlots}{Set to \code{TRUE} to enable \emph{m/z} \emph{vs}
retention time scatter plots.}

\item{absMinAbundance, relMinAbundance}{Minimum absolute or relative
(\samp{0-1}) abundance across objects for a result to be kept. For
instance, \code{relMinAbundance=0.5} means that a result should be present
in at least half of the number of compared objects. Set to \samp{NULL} to
ignore and keep all results. Limits cannot be set when \code{uniqueFrom} is
not \code{NULL}.}

\item{uniqueFrom}{Set this argument to only retain feature groups that are unique
within one or more of the objects for which the consensus is made.
Selection is done by setting the value of \code{uniqueFrom} to a
\code{logical} (values are recycled), \code{numeric} (select by index) or a
\code{character} (as obtained with \code{algorithm(obj)}). For
\code{logical} and \code{numeric} values the order corresponds to the order
of the objects given for the consensus. Set to \code{NULL} to ignore.}

\item{uniqueOuter}{If \code{uniqueFrom} is not \code{NULL} and if
\code{uniqueOuter=TRUE}: only retain data that are also unique between
objects specified in \code{uniqueFrom}.}
}
\value{
\code{comparison} returns a \code{\link{featureGroupsComparison}}
  object.

\code{plotVenn} (invisibly) returns a list with the following fields: \itemize{
\item \code{gList} the \code{gList} object that was returned by
  the utilized \pkg{\link{VennDiagram}} plotting function.
\item \code{areas} The total area for each plotted group.
\item \code{intersectionCounts} The number of intersections between groups.
}

The order for the \code{areas} and \code{intersectionCounts} fields is the same as the parameter order
from the used plotting function (see \emph{e.g.} \code{\link{draw.pairwise.venn}} and
\code{\link{draw.triple.venn}}).

\code{consensus} returns a \code{\link{featureGroups}} object with a consensus from the compared feature
  groups.
}
\description{
Functionality to compare feature groups and make a consensus.
}
\details{
Feature groups objects originating from differing feature finding and/or
grouping algorithms (or their parameters) may be compared to assess their
output and generate a consensus.

The \code{comparison} method generates a
  \code{\link{featureGroupsComparison}} object from given feature groups
  objects, which in turn may be used for (visually) comparing presence of
  feature groups and generating a consensus. Internally, this function will
  collapse each feature groups object to \emph{pseudo} features objects by
  averaging their retention times, \emph{m/z} values and intensities, where
  each original feature groups object becomes an 'analysis'. All
  \emph{pseudo} features are then grouped using
  \link[=feature-grouping]{regular feature grouping algorithms} so that a
  comparison can be made.

\code{plot} generates an \emph{m/z} \emph{vs} retention time plot.

\code{plotVenn} plots a Venn diagram outlining unique and shared
  feature groups between up to five compared feature groups.

\code{plotUpSet} plots an UpSet diagram outlining unique and shared
  feature groups.

\code{plotChord} plots a chord diagram to visualize the distribution
  of feature groups.

\code{consensus} combines all compared feature groups and averages their retention, \emph{m/z} and intensity
  data. Not yet supported for \link[=sets-workflow]{sets workflows}.
}
